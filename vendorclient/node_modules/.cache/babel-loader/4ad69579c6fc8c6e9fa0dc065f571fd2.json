{"ast":null,"code":"import _objectSpread from \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport decode from 'jwt-decode';\nexport default class AuthService {\n  constructor(domain) {\n    this.domain = domain || 'http://localhost:3200'; //API Service\n\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email, password) {\n    return this.fetch(\"\".concat(this.domain), {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.token); // Setting the token in localStorage\n\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    const token = this.getToken(); //Getting Token From LocalStorage\n\n    if (token !== null && token !== undefined && token !== '') {\n      return !!token;\n    }\n  }\n\n  setToken(idToken) {\n    //Save User token to Localstorage\n    localStorage.setItem('jwtToken', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('jwtToken');\n  }\n\n  logout() {\n    localStorage.removeItem('jwtToken');\n  }\n\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  fetch(url, options) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content_type': 'application/json'\n    };\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer' + this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(responsse => responsse.json());\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/Authentication/AuthService.js"],"names":["decode","AuthService","constructor","domain","fetch","bind","login","getProfile","email","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","undefined","idToken","localStorage","setItem","getItem","logout","removeItem","url","options","headers","_checkStatus","responsse","json","response","status","error","Error","statusText"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACf,SAAKA,MAAL,GAAcA,MAAM,IAAI,uBAAxB,CADe,CACiC;;AAChD,SAAKC,KAAL,GAAc,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAd;AACA,SAAKC,KAAL,GAAc,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAd;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,KAAK,CAACE,KAAD,EAASC,QAAT,EAAoB;AACrB,WAAO,KAAKL,KAAL,WAAc,KAAKD,MAAnB,GAA4B;AAChCO,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAClBL,QAAAA,KADkB;AAElBC,QAAAA;AAFkB,OAAf;AAFyB,KAA5B,EAMJK,IANI,CAMCC,GAAG,IAAE;AACT,WAAKC,QAAL,CAAcD,GAAG,CAACE,KAAlB,EADS,CACgB;;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;AACH,KATM,CAAP;AAUH;;AAEDK,EAAAA,QAAQ,GAAE;AACN,UAAMH,KAAK,GAAG,KAAKI,QAAL,EAAd,CADM,CACwB;;AAC9B,QAAGJ,KAAK,KAAI,IAAT,IAAiBA,KAAK,KAAGK,SAAzB,IAAsCL,KAAK,KAAI,EAAlD,EAAqD;AACjD,aAAO,CAAC,CAACA,KAAT;AACH;AACJ;;AAEDD,EAAAA,QAAQ,CAACO,OAAD,EAAS;AACb;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCF,OAAhC;AACH;;AAEDF,EAAAA,QAAQ,GAAE;AACR;AACE,WAAOG,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJH,IAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACH;;AAEDrB,EAAAA,UAAU,GAAE;AACR,WAAOP,MAAM,CAAC,KAAKqB,QAAL,EAAD,CAAb;AACH;;AAEDjB,EAAAA,KAAK,CAACyB,GAAD,EAAMC,OAAN,EAAc;AACf,UAAMC,OAAO,GAAG;AACZ,gBAAW,kBADC;AAEZ,sBAAiB;AAFL,KAAhB;;AAIA,QAAG,KAAKX,QAAL,EAAH,EAAmB;AACfW,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,WAAW,KAAKV,QAAL,EAAvC;AACH;;AAED,WAAOjB,KAAK,CAAEyB,GAAF;AACRE,MAAAA;AADQ,OAELD,OAFK,EAAL,CAKNhB,IALM,CAKD,KAAKkB,YALJ,EAMNlB,IANM,CAMDmB,SAAS,IAAIA,SAAS,CAACC,IAAV,EANZ,CAAP;AAOH;;AAEDF,EAAAA,YAAY,CAACG,QAAD,EAAU;AAChB;AACA,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAiB,GAA/C,EAAoD;AAAE;AACpD,aAAOD,QAAP;AACH,KAFC,MAEK;AACH,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAZ;AACAF,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACH;AACJ;;AAzE4B","sourcesContent":["import decode from 'jwt-decode';\n\nexport default class AuthService {\n    constructor(domain){\n        this.domain = domain || 'http://localhost:3200' //API Service\n        this.fetch  = this.fetch.bind(this);\n        this.login  = this.login.bind(this);\n        this.getProfile = this.getProfile.bind(this); \n    }\n\n    login(email , password)  {\n        return this.fetch(`${this.domain}`,{\n           method: 'POST',\n           body : JSON.stringify({\n               email,\n               password\n           }) \n        }).then(res=>{\n            this.setToken(res.token) // Setting the token in localStorage\n            return Promise.resolve(res);\n        })\n    }\n\n    loggedIn(){\n        const token = this.getToken() //Getting Token From LocalStorage\n        if(token!== null && token!==undefined && token!== ''){\n            return !!token\n        }\n    }\n\n    setToken(idToken){\n        //Save User token to Localstorage\n        localStorage.setItem('jwtToken',idToken)\n    }\n\n    getToken(){\n      // Retrieves the user token from localStorage\n        return localStorage.getItem('jwtToken');\n    }\n\n    logout(){\n        localStorage.removeItem('jwtToken');\n    }\n\n    getProfile(){\n        return decode(this.getToken());\n    }\n\n    fetch(url, options){\n        const headers = {\n            'Accept' : 'application/json',\n            'Content_type' : 'application/json'\n        }\n        if(this.loggedIn()){\n            headers['Authorization']  = 'Bearer' + this.getToken()\n        }\n\n        return fetch (url,{\n            headers,\n            ...options\n        })\n\n        .then(this._checkStatus)\n        .then(responsse => responsse.json())\n    }\n\n    _checkStatus(response){\n          // raises an error in case response status is not a success\n          if (response.status >= 200 && response.status <300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}